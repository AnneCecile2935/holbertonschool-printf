NAME
_printf
        La fonction printf permet d'afficher un/des caractère(s) ou encore des entiers suivant une valeur(s) donné.

SYNOPSIS

#include <stdarg.h>
#include "main.h"

int _printf(const char *format, ...)

DESCRIPTION
La fonction _printf est une fonction variadique, qui prend comme argument le format et qui retourne un int.
Etant une fonction variadique, on utilise va_list, va_start, va_arg et va_end car c'est comme si elle avait un nombre infini d'arguments.
Il y a deux façon de pouvoir afficher une sortie avec _prinft :
- Soit c'est seulement une chaîne de caractère
- Soit on ajoute un spécifier dans le format reçu, alors le programme va executer une fonction suivant le format reçu en argument.
Suivant le format que reçoit la fonction, elle va agir différemment en executant une fonction différente si c'est un caractère,une chaine de caractère, un int, un decimal.

Pour savoir comment agir, il faut lui attribuer un specifier qui va correspondre à l'execution d'une fonction pour afficher le bon type de valeur en sortie. Ces sépcifiers sont
%s, %c, %i, %d.

Conversion specifieurs
s : Ce spécifieur indique à _printf qu'elle doit afficher une chaine de caractère via la fonction print_string
c : Ce spécifier indique à _printf qu'elle doit afficher un caractère, via la fonction print_char
% : Ce caractère sert à la fonction _printf à détecter s'il y aura un spécifier ou non et donc à executer une fonction pour afficher la valuer conforme
i,d : Ce spécifier indique à _printf qu'elle doit afficher un int ou decimal, via la fonction.

RETURN VALUE
la fonction _printf retourne le nombres de caractère imprimés qui est stocké au fur et à mesure dans les différente boucle

EXAMPLES
_printf("%s",Le campus de Laval est super sympa!"\n"); Sortie :Le campus de Laval est super sympa!
_printf("%?") sortie:%?
_printf("Negative:[%d]\n", -5654646); Sortie -5654646



PROGRAMME SOURCE

#include <stdarg.h>
#include "main.h"
/**
* _printf - print the format
* @format: arguments
* Return: count number of characters
*/
/*int _printf(const char *format, ...)
{
specifiers type[] = {
{'c', print_char}, {'s', _print_strings},
{'%', _print_pourcentage}, {'d', print_int}, {'i', print_int}, {'\0', NULL},};
int i = 0;
int j;
int count = 0;
va_list arg;
va_start(arg, format);
if (format == NULL)
	return (-1);
while (format && format[i]) /* si le format est non nul
	{
	if (format[i] == '%')
	{
	i++;
	for (j = 0; type[j].entry; j++)
	{
	if (format[i] == type[j].entry) /* s'il y a une correspondance
	{
	count += type[j].print_func(arg);
	break; /* on s'arrête
	}
	}
	if (!type[j].entry)
	{
	_putchar ('%');
	_putchar (format[i]);
	count += 2;
	}
	}
	else
	{
	_putchar(format[i]);
	count++;
	}
	i++;
	}
	va_end(arg);
	return (count);
}

Date et auteur
28-03-2024
Robin et Anne-Cécile
